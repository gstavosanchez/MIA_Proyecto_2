CREATE TABLE Tipo(
    tipo_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre VARCHAR(10) NOT NULL,
    CONSTRAINT tipo_pk PRIMARY KEY(tipo_ID)
);

CREATE TABLE Membresia(
    membresia_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre VARCHAR(10) NOT NULL,
    precio NUMERIC(6,2) NOT NULL,
    CONSTRAINT membresia_pk PRIMARY KEY(membresia_ID)
);

CREATE TABLE Deporte(
    deporte_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre VARCHAR(20) NOT NULL,
    imagen VARCHAR(200) NULL,
    color VARCHAR(20)  NULL,
    CONSTRAINT nombre_deporte_unique UNIQUE(nombre),
    CONSTRAINT deporte_pk PRIMARY KEY(deporte_ID) 
);

CREATE TABLE Temporada(
    temporada_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre VARCHAR(20) NOT NULL,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE  NOT NULL,
    estado NUMBER NOT NULL,
    CONSTRAINT nombre_temporada_unique UNIQUE(nombre),
    CONSTRAINT temporada_pk PRIMARY KEY(temporada_ID)   
);
CREATE TABLE Jornada(
    jornada_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre VARCHAR(20) NOT NULL,
    estado NUMBER NOT NULL,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE  NOT NULL,
    temporada_ID NUMBER NOT NULL,
    CONSTRAINT joranada_pk PRIMARY KEY(jornada_ID),
    CONSTRAINT jornada_fk FOREIGN KEY (temporada_ID) REFERENCES Temporada(temporada_ID)
); 
CREATE TABLE Usuario(
    usuario_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    user_name VARCHAR(100) NOT NULL,
    pass VARCHAR(100) NOT NULL,
    nombre VARCHAR(50) NOT NULL,
    apellido VARCHAR(50) NOT NULL,
    fecha_nacimiento DATE NOT NULL, 
    fecha_registro TIMESTAMP(1) NOT NULL,
    email VARCHAR(100) NOT NULL,
    foto_perfil VARCHAR(200) NULL,
    tipo_ID NUMBER NOT NULL,
    membresia_ID NUMBER NOT NULL,
    CONSTRAINT username_unique UNIQUE(user_name),
    CONSTRAINT usuario_pk PRIMARY KEY(usuario_ID),
    CONSTRAINT tipo_usuario_fk FOREIGN KEY (tipo_ID) REFERENCES Tipo(tipo_ID),
    CONSTRAINT membresia_usuario_fk FOREIGN KEY (membresia_ID) REFERENCES Membresia(membresia_ID)
);

--alter SESSION set NLS_DATE_FORMAT = 'DD-MM-YYYY HH24:MI'
CREATE TABLE TablaPosicion(
    detalle_cliente_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    p_10 NUMBER NOT NULL,
    p_5 NUMBER NOT NULL,
    P_3 NUMBER NOT NULL,
    P_0 NUMBER NOT NULL,
    total NUMBER NOT NULL,
    incremento NUMBER NOT NULL,
    posicion_anterior NUMBER NOT NULL,
    membresia_ID NUMBER NOT NULL,
    usuario_ID NUMBER NOT NULL,
    temporada_ID NUMBER NOT NULL,
    CONSTRAINT detalle_client_pk PRIMARY KEY(detalle_cliente_ID),
    CONSTRAINT usuario_ID_unique UNIQUE(usuario_ID),
    CONSTRAINT membresia_dc_fk FOREIGN KEY (membresia_ID) REFERENCES Membresia(membresia_ID),
    CONSTRAINT usuario_dc_fk FOREIGN KEY (usuario_ID) REFERENCES Usuario(usuario_ID),
    CONSTRAINT temporada_dc_fk FOREIGN KEY (temporada_ID) REFERENCES Temporada(temporada_ID) 
);
CREATE TABLE Evento(
    evento_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    estado NUMBER NOT NULL,
    fecha TIMESTAMP NOT NULL,
    equipo_local VARCHAR(20) NOT NULL,
    equipo_visitante VARCHAR(20) NOT NULL,
    resultado_local NUMBER NOT NULL,
    resultado_visitante NUMBER NOT NULL,
    deporte_ID NOT NULL,
    jornada_ID NOT NULL,
    CONSTRAINT evento_id_pk PRIMARY KEY(evento_ID),
    CONSTRAINT deporte_ed_fk FOREIGN KEY (deporte_ID) REFERENCES Deporte(deporte_ID),
    CONSTRAINT jornda_ed_fk FOREIGN KEY (jornada_ID) REFERENCES Jornada(jornada_ID)   
    
);
CREATE TABLE Prediccion(
    prediccion_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    resultado_local NUMBER NOT NULL,
    resultado_visitante NUMBER NOT NULL,
    usuario_ID NUMBER NOT NULL, 
    evento_ID NUMBER NOT NULL,
    CONSTRAINT prediccion_pk PRIMARY KEY(prediccion_ID),
    CONSTRAINT evento_prediccion_fk FOREIGN KEY (evento_ID) REFERENCES Evento(evento_ID),
    CONSTRAINT usuario_prediccion_fk FOREIGN KEY (usuario_ID) REFERENCES Usuario(usuario_ID)
);

/* ================= ===================== PROCEDIMIENTOS ================= ===================== */
-- == == == INSERTAR USUARIO == == ==
CREATE OR REPLACE PROCEDURE sp_insert_usuario(
    p_username IN Usuario.USER_NAME%TYPE,
    p_password IN USUARIO.PASS%TYPE,
    p_nombre IN USUARIO.NOMBRE%TYPE,
    p_apellido IN USUARIO.APELLIDO%TYPE,
    p_fecha_nacimiento IN VARCHAR,
    p_email IN USUARIO.EMAIL%TYPE,
    p_membresia_ID IN USUARIO.MEMBRESIA_ID%TYPE  
)    
IS
-- Declarar variables
BEGIN
    INSERT INTO USUARIO(USER_NAME,PASS,NOMBRE,APELLIDO,FECHA_NACIMIENTO,FECHA_REGISTRO,EMAIL,TIPO_ID,MEMBRESIA_ID)
    VALUES (p_username,p_password,p_nombre,p_apellido,(TO_DATE(p_fecha_nacimiento, 'DD-MM-YYYY')),CURRENT_TIMESTAMP(2),
            p_email,1,p_membresia_ID);
END sp_insert_usuario;
-- == == == INSERTAR USUARIO-carga-masiva == == ==
CREATE OR REPLACE PROCEDURE sp_insert_usuario_carga_masiva(
    p_username IN Usuario.USER_NAME%TYPE,
    p_password IN USUARIO.PASS%TYPE,
    p_nombre IN USUARIO.NOMBRE%TYPE,
    p_apellido IN USUARIO.APELLIDO%TYPE,
    p_fecha_nacimiento IN VARCHAR,
    p_email IN USUARIO.EMAIL%TYPE,
    p_membresia_ID IN USUARIO.MEMBRESIA_ID%TYPE  
)    
IS
-- Declarar variables
    v_index NUMBER := 0;
BEGIN
    SELECT COUNT(*) INTO v_index FROM Usuario WHERE user_name = p_username;
    IF v_index = 0 THEN
        INSERT INTO USUARIO(USER_NAME,PASS,NOMBRE,APELLIDO,FECHA_NACIMIENTO,FECHA_REGISTRO,EMAIL,TIPO_ID,MEMBRESIA_ID)
        VALUES (p_username,p_password,p_nombre,p_apellido,(TO_DATE(p_fecha_nacimiento, 'DD-MM-YYYY')),CURRENT_TIMESTAMP(2),
                p_email,1,p_membresia_ID);
    END IF;
END sp_insert_usuario_carga_masiva;
-- == == == == TEMPORADA == == == == 
CREATE OR REPLACE PROCEDURE sp_insert_temporada(
    p_nombre IN TEMPORADA.NOMBRE%TYPE,
    p_fecha_inicio IN VARCHAR
)
IS
    v_fecha_fin DATE := ((ADD_MONTHS(TO_DATE(p_fecha_inicio, 'DD-MM-YYYY'),1)) - 1);
BEGIN
/*
    HABILITADO = 1
    DESHABILITADO = 0
*/
    INSERT INTO Temporada(nombre,estado,FECHA_INICIO,FECHA_FIN) 
    VALUES (p_nombre,1,(TO_DATE(p_fecha_inicio, 'DD-MM-YYYY')),v_fecha_fin);
END sp_insert_temporada;
-- == == == == JORNADA == == == ==
CREATE OR REPLACE PROCEDURE sp_insert_jornada(
    p_nombre IN JORNADA.NOMBRE%TYPE,
    p_temporada IN VARCHAR
)
IS
    v_temporada_ID NUMBER;
    v_origin_date DATE; 
    v_fecha_incio DATE;
    v_fecha_fin DATE;
    v_count_repeat NUMBER := 0;
BEGIN
    SELECT temporada_ID  INTO v_temporada_ID FROM Temporada WHERE NOMBRE=p_temporada;
    IF ( v_temporada_ID > 0 AND v_temporada_ID IS NOT NULL ) THEN
        SELECT COUNT(*) INTO v_count_repeat FROM JORNADA
        WHERE NOMBRE = p_nombre
        AND TEMPORADA_ID = v_temporada_ID;
        IF v_count_repeat = 0  THEN
            SELECT fecha_inicio INTO v_origin_date FROM Temporada WHERE NOMBRE=p_temporada; 
            IF (p_nombre = 'J1') THEN
                v_fecha_incio := v_origin_date;             -- 1 + 0 = 01/01/2021
                v_fecha_fin := (v_origin_date + 6);         -- 1 + 6 = 07/01/2021
            ELSIF (p_nombre = 'J2') THEN
                v_fecha_incio := (v_origin_date + 7);       -- 1 + 7 = 08/01/2021
                v_fecha_fin := (v_origin_date + 13);        -- 1 + 13 = 14/01/2021 
            ELSIF (p_nombre = 'J3') THEN
                v_fecha_incio := (v_origin_date + 14);      -- 1 + 14 = 15/01/2021
                v_fecha_fin := (v_origin_date + 20);        -- 1 + 20 = 21/01/2021
            ELSE
                v_fecha_incio := (v_origin_date + 21);      -- 1 + 21 = 22/01/2021
                v_fecha_fin := ((ADD_MONTHS(v_origin_date,1)) - 1);
            END IF;     
            INSERT INTO JORNADA(NOMBRE,ESTADO,TEMPORADA_ID,FECHA_INICIO,FECHA_FIN) 
            VALUES(p_nombre,1,v_temporada_ID,v_fecha_incio,v_fecha_fin);
        END IF;
    ELSE
        RAISE_APPLICATION_ERROR(-20000, 'Nombre temporada no existe');
    END IF; 
END sp_insert_jornada;

-- == == == == DETALLE CLIENTE == == == ==
CREATE OR REPLACE PROCEDURE sp_insert_detalle_cliente(
    p_usuario IN VARCHAR,
    p_temporada IN VARCHAR,
    p_membresia IN VARCHAR
)
IS
    v_temporada_ID NUMBER;
    v_usuario_ID NUMBER;
    v_membresia_ID NUMBER;
    v_index NUMBER := 0;
    v_length NUMBER := 0;
    v_repeat NUMBER := 0;
BEGIN
    SELECT temporada_ID  INTO v_temporada_ID FROM Temporada WHERE NOMBRE = p_temporada;
    SELECT usuario_ID INTO v_usuario_ID FROM Usuario WHERE  USER_NAME = p_usuario;
    SELECT MEMBRESIA_ID INTO v_membresia_ID FROM MEMBRESIA WHERE NOMBRE = p_membresia;
    SELECT COUNT(*) INTO v_repeat FROM TablaPosicion
    WHERE USUARIO_ID = v_usuario_ID
    AND membresia_ID = v_membresia_ID -- Pendiente de revisar
    AND TEMPORADA_ID = v_temporada_ID;
    IF v_repeat = 0 THEN
        IF ((v_temporada_ID > 0 AND v_temporada_ID IS NOT NULL ) AND (v_usuario_ID > 0 AND v_usuario_ID IS NOT NULL ) AND
            (v_membresia_ID > 0 AND v_membresia_ID IS NOT NULL )) THEN
            SELECT COUNT(*) INTO v_length FROM USUARIO WHERE TIPO_ID = 1;
            FOR l_index IN 1..v_length LOOP
                v_index := v_index + 1 ;
            END LOOP;
            INSERT INTO TablaPosicion(USUARIO_ID,TEMPORADA_ID,MEMBRESIA_ID,TOTAL,INCREMENTO,POSICION_ANTERIOR,P_10,P_5,P_3,P_0)
            VALUES (v_usuario_ID,v_temporada_ID,v_membresia_ID,0,0,v_index,0,0,0,0);
        END IF;
    END IF; 
END sp_insert_detalle_cliente;
-- == == == == EVENTO DEPORTIVO == == == ==
CREATE OR REPLACE PROCEDURE sp_insert_evento(
    p_fecha VARCHAR,
    p_date_time VARCHAR,
    p_equipo_local IN Evento.equipo_local%TYPE,
    p_equipo_visitante IN Evento.equipo_visitante%TYPE,
    p_r_local IN Evento.resultado_local%TYPE,
    p_r_visitante IN Evento.resultado_visitante%TYPE,
    p_deporte IN VARCHAR,
    p_jornada IN VARCHAR,
    p_temporada IN VARCHAR
)
IS
    v_deporte_ID NUMBER := 0; 
    v_jornada_ID NUMBER := 0;
    v_index_repeat NUMBER := 0; 
    v_datetime TIMESTAMP;
    v_date DATE;
    v_fecha_fin_jo DATE;
    v_fecha_inicio_jo DATE; 
BEGIN
    SELECT DEPORTE_ID INTO v_deporte_ID FROM DEPORTE WHERE NOMBRE = p_deporte;

    SELECT j.JORNADA_ID INTO v_jornada_ID from JORNADA j 
    INNER JOIN TEMPORADA t on j.temporada_ID = t.temporada_ID
    WHERE j.NOMBRE = p_jornada AND t.NOMBRE =  p_temporada;

    SELECT COUNT(*) INTO v_index_repeat FROM Evento
    WHERE DEPORTE_ID = v_deporte_ID AND JORNADA_ID = v_jornada_ID
    AND equipo_local = p_equipo_local AND equipo_visitante = p_equipo_visitante;

    IF v_index_repeat = 0 THEN
        IF ((v_deporte_ID > 0 AND v_deporte_ID IS NOT NULL) AND 
            (v_jornada_ID > 0 AND v_deporte_ID IS NOT NULL)) THEN
            v_datetime := TO_TIMESTAMP(p_date_time,'DD-MM-YYYY HH24:MI');
            --v_date := TO_DATE(TO_CHAR(v_datetime,'DD-MM-YYYY HH24:MI:SS.FF'),'DD-MM-YYYY HH24:MI:SS.FF');
            v_date := TO_DATE(p_fecha,'DD-MM-YYYY');
            SELECT fecha_inicio INTO v_fecha_inicio_jo FROM JORNADA WHERE JORNADA_ID=v_jornada_ID;
            SELECT fecha_fin INTO v_fecha_fin_jo FROM JORNADA WHERE JORNADA_ID=v_jornada_ID;

            /*
                if (fecha >= inicio   && fecha <= fin )
                if (inicio <= fecha && fecha <= fin )
            */
            IF (( v_date >= v_fecha_inicio_jo) AND ( v_date <=v_fecha_fin_jo)) THEN
                INSERT INTO Evento(estado,fecha,equipo_local,equipo_visitante,resultado_local,resultado_visitante,deporte_ID,jornada_ID)
                VALUES (1,v_datetime,p_equipo_local,p_equipo_visitante,p_r_local,p_r_visitante,v_deporte_ID,v_jornada_ID);
            END IF;
        END IF;
    END IF;
END sp_insert_evento;

-- == == == == PREDICCIÓN EVENTO == == == ==
CREATE OR REPLACE PROCEDURE sp_insert_prediccion(
    p_pre_local IN Prediccion.resultado_local%Type,
    p_pre_vistante IN Prediccion.resultado_visitante%Type,
    p_usuario IN VARCHAR,
    p_deporte IN VARCHAR,
    p_jornada IN VARCHAR, 
    p_temporada IN VARCHAR,
    p_equipo_local IN VARCHAR,
    p_equipo_vistante IN VARCHAR
)
IS
    v_evento_id NUMBER := 0;
    v_usuario_id NUMBER := 0;
    v_index NUMBER := 0;
BEGIN
    SELECT e.EVENTO_ID INTO v_evento_id 
    FROM EVENTO e 
    INNER JOIN DEPORTE d ON e.DEPORTE_ID = d.DEPORTE_ID
    INNER JOIN JORNADA j ON e.JORNADA_ID = j.JORNADA_ID
    INNER JOIN TEMPORADA t  ON j.TEMPORADA_ID = t.TEMPORADA_ID
    WHERE e.equipo_local = p_equipo_local
    AND e.equipo_visitante = p_equipo_vistante
    AND j.NOMBRE = p_jornada
    AND t.NOMBRE = p_temporada
    AND d.NOMBRE = p_deporte;

    SELECT USUARIO_ID INTO v_usuario_id FROM USUARIO
    WHERE user_name = p_usuario;
    IF ((v_evento_id > 0 AND v_evento_id IS NOT NULL) AND (v_usuario_id > 0 AND v_usuario_id IS NOT NULL)) THEN
        SELECT COUNT(*) INTO v_index FROM Prediccion
        WHERE USUARIO_ID = v_usuario_id
        AND EVENTO_ID = v_evento_id;
        IF v_index = 0 THEN
            INSERT INTO Prediccion(resultado_local,resultado_visitante,usuario_ID,evento_ID)
            VALUES (p_pre_local,p_pre_vistante,v_usuario_id,v_evento_id);
        END IF;
    END IF;

END sp_insert_prediccion;

CREATE OR REPLACE PROCEDURE sp_insert_deporte(
    p_deporte IN DEPORTE.NOMBRE%Type
)
IS
    v_count_deporte NUMBER := 0;
BEGIN
    SELECT COUNT(*) INTO v_count_deporte FROM DEPORTE WHERE NOMBRE = p_deporte;
    IF v_count_deporte = 0 THEN
        INSERT INTO DEPORTE(NOMBRE) VALUES(p_deporte);
    END IF;
END sp_insert_deporte;


/* ================= ===================== TRIGGERS ================= ===================== */
CREATE OR REPLACE TRIGGER tg_audit_user
BEFORE INSERT ON Usuario FOR EACH ROW 
DECLARE
    v_year_old NUMBER := EXTRACT(YEAR FROM TO_DATE(:NEW.fecha_nacimiento));
    v_year_now NUMBER := EXTRACT(YEAR FROM TO_DATE(SYSDATE));
BEGIN
    IF ((v_year_now - v_year_old)<18) THEN
        RAISE_APPLICATION_ERROR(-20000, 'FechaNacimiento, edad a mayor de 18 años');
    END IF;
    --IF (NOT REGEXP_LIKE(:NEW.PASS, '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)([A-Za-z\d]|[^ ]|[\s+]){9,}$')) THEN
        --RAISE_APPLICATION_ERROR(-20000, 'PASSWORD,password minimo 8 caracters con mayuscula');
    --END IF;
    IF (NOT REGEXP_LIKE(:NEW.EMAIL, '^(\S+)\@(\S+)\.(\S+)$'))  THEN
        RAISE_APPLICATION_ERROR(-20000, 'email,email invalido');
    END IF;

END;
/


