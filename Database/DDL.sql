CREATE TABLE Tipo(
    tipo_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre VARCHAR(10) NOT NULL,
    CONSTRAINT tipo_pk PRIMARY KEY(tipo_ID)
);

CREATE TABLE Membresia(
    membresia_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre VARCHAR(10) NOT NULL,
    precio NUMERIC(6,2) NOT NULL,
    CONSTRAINT membresia_pk PRIMARY KEY(membresia_ID)
);

CREATE TABLE Deporte(
    deporte_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre VARCHAR(20) NOT NULL,
    imagen VARCHAR(200) NULL,
    color VARCHAR(20)  NULL,
    CONSTRAINT nombre_deporte_unique UNIQUE(nombre),
    CONSTRAINT deporte_pk PRIMARY KEY(deporte_ID) 
);
CREATE TABLE Equipo(
    equipo_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY, 
    nombre VARCHAR(50) NOT NULL,
    CONSTRAINT equipo_unique UNIQUE(nombre),
    CONSTRAINT equipo_pk PRIMARY KEY(equipo_ID) 
);
CREATE TABLE Temporada(
    temporada_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre VARCHAR(20) NOT NULL,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE  NOT NULL,
    estado NUMBER NOT NULL,
    CONSTRAINT nombre_temporada_unique UNIQUE(nombre),
    CONSTRAINT temporada_pk PRIMARY KEY(temporada_ID)   
);
CREATE TABLE Jornada(
    jornada_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre VARCHAR(20) NOT NULL,
    estado NUMBER NOT NULL,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE  NOT NULL,
    temporada_ID NUMBER NOT NULL,
    CONSTRAINT joranada_pk PRIMARY KEY(jornada_ID),
    CONSTRAINT jornada_fk FOREIGN KEY (temporada_ID) REFERENCES Temporada(temporada_ID)
); 
CREATE TABLE Usuario(
    usuario_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    user_name VARCHAR(100) NOT NULL,
    pass VARCHAR(100) NOT NULL,
    nombre VARCHAR(50) NOT NULL,
    apellido VARCHAR(50) NOT NULL,
    fecha_nacimiento DATE NOT NULL, 
    fecha_registro TIMESTAMP(1) NOT NULL,
    email VARCHAR(100) NOT NULL,
    foto_perfil VARCHAR(200) NULL,
    tipo_ID NUMBER NOT NULL,
    membresia_ID NUMBER NOT NULL,
    CONSTRAINT username_unique UNIQUE(user_name),
    CONSTRAINT usuario_pk PRIMARY KEY(usuario_ID),
    CONSTRAINT tipo_usuario_fk FOREIGN KEY (tipo_ID) REFERENCES Tipo(tipo_ID),
    CONSTRAINT membresia_usuario_fk FOREIGN KEY (membresia_ID) REFERENCES Membresia(membresia_ID)
);

--drop table Usuario;
--alter SESSION set NLS_DATE_FORMAT = 'DD-MM-YYYY HH24:MI'
CREATE TABLE DetalleCliente(
    detalle_cliente_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    p_10 NUMBER NOT NULL,
    p_5 NUMBER NOT NULL,
    P_3 NUMBER NOT NULL,
    P_0 NUMBER NOT NULL,
    total NUMBER NOT NULL,
    incremento NUMBER NOT NULL,
    posicion_anterior NUMBER NOT NULL,
    membresia_ID NUMBER NOT NULL,
    usuario_ID NUMBER NOT NULL,
    temporada_ID NUMBER NOT NULL,
    CONSTRAINT detalle_client_pk PRIMARY KEY(detalle_cliente_ID),
    CONSTRAINT usuario_ID_unique UNIQUE(usuario_ID),
    CONSTRAINT membresia_dc_fk FOREIGN KEY (membresia_ID) REFERENCES Membresia(membresia_ID),
    CONSTRAINT usuario_dc_fk FOREIGN KEY (usuario_ID) REFERENCES Usuario(usuario_ID),
    CONSTRAINT temporada_dc_fk FOREIGN KEY (temporada_ID) REFERENCES Temporada(temporada_ID) 
);
CREATE TABLE Evento(
    evento_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    estado NUMBER NOT NULL,
    fecha TIMESTAMP NOT NULL,
    resultado_local NUMBER NOT NULL,
    resutaldo_visitante NUMBER NOT NULL,
    deporte_ID NOT NULL,
    jornada_ID NOT NULL,
    CONSTRAINT evento_id_pk PRIMARY KEY(evento_ID),
    CONSTRAINT deporte_ed_fk FOREIGN KEY (deporte_ID) REFERENCES Deporte(deporte_ID),
    CONSTRAINT jornda_ed_fk FOREIGN KEY (jornada_ID) REFERENCES Jornada(jornada_ID)   
    
);
CREATE TABLE DetalleEvento(
    detalle_evento_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    tipo VARCHAR(10) NOT NULL,
    evento_ID NUMBER NOT NULL,
    equipo_ID NUMBER NOT NULL,
    CONSTRAINT detalle_evento_pk PRIMARY KEY(detalle_evento_ID),
    CONSTRAINT equipo_de_fk FOREIGN KEY (equipo_ID) REFERENCES Equipo(equipo_ID),
    CONSTRAINT evento_de_fk FOREIGN KEY (evento_ID) REFERENCES Evento(evento_ID)
);
CREATE TABLE Prediccion(
    prediccion_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    resultado_local NUMBER NOT NULL,
    resultado_visitante NUMBER NOT NULL,
    usuario_ID NUMBER NOT NULL, 
    evento_ID NUMBER NOT NULL,
    CONSTRAINT prediccion_pk PRIMARY KEY(prediccion_ID),
    CONSTRAINT evento_prediccion_fk FOREIGN KEY (evento_ID) REFERENCES Evento(evento_ID),
    CONSTRAINT usuario_prediccion_fk FOREIGN KEY (usuario_ID) REFERENCES Usuario(usuario_ID)
);

/* ================= ===================== PROCEDIMIENTOS ================= ===================== */
-- == == == INSERTAR USUARIO == == ==
CREATE OR REPLACE PROCEDURE sp_insert_usuario(
    p_username IN Usuario.USER_NAME%TYPE,
    p_password IN USUARIO.PASS%TYPE,
    p_nombre IN USUARIO.NOMBRE%TYPE,
    p_apellido IN USUARIO.APELLIDO%TYPE,
    p_fecha_nacimiento IN VARCHAR,
    p_email IN USUARIO.EMAIL%TYPE,
    p_membresia_ID IN USUARIO.MEMBRESIA_ID%TYPE  
)    
    IS
    -- Declarar variables
    BEGIN
        INSERT INTO USUARIO(USER_NAME,PASS,NOMBRE,APELLIDO,FECHA_NACIMIENTO,FECHA_REGISTRO,EMAIL,TIPO_ID,MEMBRESIA_ID)
        VALUES (p_username,p_password,p_nombre,p_apellido,(TO_DATE(p_fecha_nacimiento, 'DD-MM-YYYY')),CURRENT_TIMESTAMP(2),
                p_email,1,p_membresia_ID);
    END sp_insert_usuario;
-- == == == == TEMPORADA == == == == 
CREATE OR REPLACE PROCEDURE sp_insert_temporada(
    p_nombre IN TEMPORADA.NOMBRE%TYPE,
    p_fecha_inicio IN VARCHAR
)
IS
    v_fecha_fin DATE := ((ADD_MONTHS(TO_DATE(p_fecha_inicio, 'DD-MM-YYYY'),1)) - 1);
BEGIN
/*
    HABILITADO = 1
    DESHABILITADO = 0
*/
    INSERT INTO Temporada(nombre,estado,FECHA_INICIO,FECHA_FIN) 
    VALUES (p_nombre,1,(TO_DATE(p_fecha_inicio, 'DD-MM-YYYY')),v_fecha_fin);
END sp_insert_temporada;
-- == == == == JORNADA == == == ==
CREATE OR REPLACE PROCEDURE sp_insert_jornada(
    p_nombre IN JORNADA.NOMBRE%TYPE,
    p_temporada IN VARCHAR
)
IS
    v_temporada_ID NUMBER;
    v_origin_date DATE; 
    v_fecha_incio DATE;
    v_fecha_fin DATE;
BEGIN
    SELECT temporada_ID  INTO v_temporada_ID FROM Temporada WHERE NOMBRE=p_temporada;
    IF ( v_temporada_ID > 0 AND v_temporada_ID IS NOT NULL )THEN
        SELECT fecha_inicio INTO v_origin_date FROM Temporada WHERE NOMBRE=p_temporada; 
        IF (p_nombre = 'J1') THEN
            v_fecha_incio := v_origin_date;             -- 1 + 0 = 01/01/2021
            v_fecha_fin := (v_origin_date + 6);         -- 1 + 6 = 07/01/2021
        ELSIF (p_nombre = 'J2') THEN
            v_fecha_incio := (v_origin_date + 7);       -- 1 + 7 = 08/01/2021
            v_fecha_fin := (v_origin_date + 13);        -- 1 + 13 = 14/01/2021 
        ELSIF (p_nombre = 'J3') THEN
            v_fecha_incio := (v_origin_date + 14);      -- 1 + 14 = 15/01/2021
            v_fecha_fin := (v_origin_date + 20);        -- 1 + 20 = 21/01/2021
        ELSE
            v_fecha_incio := (v_origin_date + 21);      -- 1 + 21 = 22/01/2021
            v_fecha_fin := ((ADD_MONTHS(v_origin_date,1)) - 1);
        END IF;     
        INSERT INTO JORNADA(NOMBRE,ESTADO,TEMPORADA_ID,FECHA_INICIO,FECHA_FIN) 
        VALUES(p_nombre,1,v_temporada_ID,v_fecha_incio,v_fecha_fin);
    ELSE
        RAISE_APPLICATION_ERROR(-20000, 'Nombre temporada no existe');
    END IF; 
END sp_insert_jornada;

-- == == == == DETALLE CLIENTE == == == ==
CREATE OR REPLACE PROCEDURE sp_insert_detalle_cliente(
    p_usuario IN VARCHAR,
    p_temporada IN VARCHAR,
    p_membresia IN VARCHAR
)
IS
    v_temporada_ID NUMBER;
    v_usuario_ID NUMBER;
    v_membresia_ID NUMBER;
    v_index NUMBER := 0;
    v_length NUMBER := 0;
BEGIN
    SELECT temporada_ID  INTO v_temporada_ID FROM Temporada WHERE NOMBRE = p_temporada;
    SELECT usuario_ID INTO v_usuario_ID FROM Usuario WHERE  USER_NAME = p_usuario;
    SELECT MEMBRESIA_ID INTO v_membresia_ID FROM MEMBRESIA WHERE NOMBRE = p_membresia;
    IF ((v_temporada_ID > 0 AND v_temporada_ID IS NOT NULL ) AND (v_usuario_ID > 0 AND v_usuario_ID IS NOT NULL ) AND
        (v_membresia_ID > 0 AND v_membresia_ID IS NOT NULL )) THEN
        SELECT COUNT(*) INTO v_length FROM USUARIO WHERE TIPO_ID = 1;
        FOR l_index IN 1..v_length LOOP
            v_index := v_index + 1 ;
        END LOOP;
        INSERT INTO DETALLECLIENTE(USUARIO_ID,TEMPORADA_ID,MEMBRESIA_ID,TOTAL,INCREMENTO,POSICION_ANTERIOR,P_10,P_5,P_3,P_0)
        VALUES (v_usuario_ID,v_temporada_ID,v_membresia_ID,0,0,v_index,0,0,0,0);
    END IF;
END sp_insert_detalle_cliente;







/* ================= ===================== TRIGGERS ================= ===================== */
CREATE OR REPLACE TRIGGER tg_audit_user
BEFORE INSERT ON Usuario FOR EACH ROW 
DECLARE
    v_year_old NUMBER := EXTRACT(YEAR FROM TO_DATE(:NEW.fecha_nacimiento));
    v_year_now NUMBER := EXTRACT(YEAR FROM TO_DATE(SYSDATE));
BEGIN
    IF ((v_year_now - v_year_old)<18) THEN
        RAISE_APPLICATION_ERROR(-20000, 'FechaNacimiento, edad a mayor de 18 aÃ±os');
    END IF;
    --IF (NOT REGEXP_LIKE(:NEW.PASS, '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)([A-Za-z\d]|[^ ]|[\s+]){9,}$')) THEN
        --RAISE_APPLICATION_ERROR(-20000, 'PASSWORD,password minimo 8 caracters con mayuscula');
    --END IF;
    IF (NOT REGEXP_LIKE(:NEW.EMAIL, '^(\S+)\@(\S+)\.(\S+)$'))  THEN
        RAISE_APPLICATION_ERROR(-20000, 'email,email invalido');
    END IF;

END;
/


