CREATE TABLE Tipo(
    tipo_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre VARCHAR(10) NOT NULL,
    CONSTRAINT tipo_pk PRIMARY KEY(tipo_ID)
);

CREATE TABLE Membresia(
    membresia_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre VARCHAR(10) NOT NULL,
    precio NUMERIC(6,2) NOT NULL,
    CONSTRAINT membresia_pk PRIMARY KEY(membresia_ID)
);

CREATE TABLE Deporte(
    deporte_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre VARCHAR(20) NOT NULL,
    imagen VARCHAR(200) NULL,
    color VARCHAR(20) NOT NULL,
    CONSTRAINT deporte_pk PRIMARY KEY(deporte_ID) 
);
CREATE TABLE Equipo(
    equipo_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY, 
    nombre VARCHAR(50) NOT NULL,
    CONSTRAINT equipo_pk PRIMARY KEY(equipo_ID) 
);
CREATE TABLE Temporada(
    temporada_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre VARCHAR(20) NOT NULL,
    CONSTRAINT temporada_pk PRIMARY KEY(temporada_ID)   
);
CREATE TABLE Jornada(
    joranada_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    nombre VARCHAR(20) NOT NULL,
    estado VARCHAR(20) NOT NULL,
    fecha_inicio TIMESTAMP(2) NULL,
    fecha_fin TIMESTAMP(2) NULL,
    temporada_ID NUMBER NOT NULL,
    CONSTRAINT joranada_pk PRIMARY KEY(joranada_ID),
    CONSTRAINT jornada_fk FOREIGN KEY (temporada_ID) REFERENCES Temporada(temporada_ID)
); 
CREATE TABLE Usuario(
    usuario_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    user_name VARCHAR(100) NOT NULL,
    pass VARCHAR(100) NOT NULL,
    nombre VARCHAR(50) NOT NULL,
    apellido VARCHAR(50) NOT NULL,
    fecha_nacimiento DATE NOT NULL, 
    fecha_registro TIMESTAMP(1) NOT NULL,
    email VARCHAR(100) NOT NULL,
    foto_perfil VARCHAR(200) NULL,
    tipo_ID NUMBER NOT NULL,
    membresia_ID NUMBER NOT NULL,
    CONSTRAINT username_unique UNIQUE(user_name),
    CONSTRAINT usuario_pk PRIMARY KEY(usuario_ID),
    CONSTRAINT tipo_usuario_fk FOREIGN KEY (tipo_ID) REFERENCES Tipo(tipo_ID),
    CONSTRAINT membresia_usuario_fk FOREIGN KEY (membresia_ID) REFERENCES Membresia(membresia_ID)
);

drop table Usuario;
--alter SESSION set NLS_DATE_FORMAT = 'DD-MM-YYYY HH24:MI'
/* ================= ===================== PROCEDIMIENTOS ================= ===================== */
-- == == == INSERTAR USUARIO == == ==
CREATE OR REPLACE PROCEDURE sp_insert_usuario(
    p_username IN Usuario.USER_NAME%TYPE,
    p_password IN USUARIO.PASS%TYPE,
    p_nombre IN USUARIO.NOMBRE%TYPE,
    p_apellido IN USUARIO.APELLIDO%TYPE,
    p_fecha_nacimiento IN VARCHAR,
    p_email IN USUARIO.EMAIL%TYPE,
    p_membresia_ID IN USUARIO.MEMBRESIA_ID%TYPE  
)    
    IS
    -- Declarar variables
    BEGIN
        INSERT INTO USUARIO(USER_NAME,PASS,NOMBRE,APELLIDO,FECHA_NACIMIENTO,FECHA_REGISTRO,EMAIL,TIPO_ID,MEMBRESIA_ID)
        VALUES (p_username,p_password,p_nombre,p_apellido,(TO_DATE(p_fecha_nacimiento, 'DD-MM-YYYY')),CURRENT_TIMESTAMP(2),
                p_email,1,p_membresia_ID);
    END sp_insert_usuario;
-- == == == == LOGIN == == == == 

/* ================= ===================== TRIGGERS ================= ===================== */
CREATE OR REPLACE TRIGGER tg_audit_user
BEFORE INSERT ON Usuario FOR EACH ROW 
DECLARE
    v_year_old NUMBER := EXTRACT(YEAR FROM TO_DATE(:NEW.fecha_nacimiento));
    v_year_now NUMBER := EXTRACT(YEAR FROM TO_DATE(SYSDATE));
BEGIN
    IF ((v_year_now - v_year_old)<18) THEN
        RAISE_APPLICATION_ERROR(-20000, 'FechaNacimiento, edad a mayor de 18 aÃ±os');
    END IF;
    --IF (NOT REGEXP_LIKE(:NEW.PASS, '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)([A-Za-z\d]|[^ ]|[\s+]){9,}$')) THEN
        --RAISE_APPLICATION_ERROR(-20000, 'PASSWORD,password minimo 8 caracters con mayuscula');
    --END IF;
    IF (NOT REGEXP_LIKE(:NEW.EMAIL, '^(\S+)\@(\S+)\.(\S+)$'))  THEN
        RAISE_APPLICATION_ERROR(-20000, 'email,email invalido');
    END IF;

END;
/


